# 2. Выполнить логические побитовые операции «И», «ИЛИ» и др. над числами 5 и 6.
# Выполнить над числом 5 побитовый сдвиг вправо и влево на два знака. Объяснить полученный результат..

# # 1) ~ - побитовый оператор ИНВЕРСИЯ.
# a = 5
# b = 6
# c = f'{~a}\n{~b}'   # ~ меняет положительное число на отрицательное со смещением на -1
# print(c)            # А если бы a= -5 и b= -6, то стали бы значения a= 4 и b= 5
#
# # 2) & - побитовый оператор И. Это наподобие умножения пары битов операндов в столбик. Там, где 0 будет в итоге 0
# a = bin(5)                  # 0b101
# b = bin(6)                  # 0b110
# # пример умножения в столбик:
# a = 5                       # 0b100 - это число 4
# b = 6
# d = 0b100
# print(d)    # да, действительно 4
# c = a & b
# print(f'a = {5}, b = {6}, c = {a&b}')
#
# ''' 3) ^ - побитовый оператор "ИСКЛЮЧАЮЩЕЕ 'ИЛИ'". Сложение по модулю 2 для любого бита операндов.
# т.е. 0 мы получаем в случае 0^0 или 1^1. 1^0 или 0^1 вернут 1.
# исходя из предыдущего примера мат.действия в столбик: 0^0 = 0; b^b=b; 1^1=0, 0^1=1; 1^0=1.
# битовое 0b011 = 3 '''
# print(f'a = {5}, b = {6}, c = {a^b}')
#
# ''' 4) | - побитовый оператор ИЛИ. Реализует побитовое логическое сложение.
# т.е.: 0^0 = 0; b^b=b; 1^1=1, 0^1=1; 1^0=1.
# битовое 0b111 = 7 '''
# print(f'a = {5}, b = {6}, c = {a|b}')
#
# ''' 5) <<,>> - операторы сдвига бита влево или вправо на одну или несколько позиций.
# При сдвиге влево на n позиций - умножение числа на 2**n, а при сдвиге вправо - целочисленное деление числа на 2**n
# '''
# a = 5
# y = a << 2  # сдвиг влево на 2 знака, умножение на 2**2. y = a*(2**2) = 5*4=20
# z = a >> 2  # сдвиг вправо на 2 знака, целочисленное деление на 2**2. z = a//(2**2) = 5//4=1
# print(f'y = x<<2 = {y}, z = x>>2 = {z}')


def bit_operators(o):
    a = 5
    b = 6
    y = a << 2
    z = a >> 2
    if o == '~':
        return f'a = {5},\nb = {6},\nc = {~a}, {~b}'
    elif o == '&':
        return f'a = {5},\nb = {6},\nc = {a & b}'
    elif o == '^':
        return f'a = {5},\nb = {6},\nc = {a ^ b}'
    elif o == '|':
        return f'a = {5},\nb = {6},\nc = {a | b}'
    elif o == '<<':
        return f'y = x<<2 = {y}'
    else:
        return f'z = x>>2 = {z}'


if __name__ == '__main__':
    print(
        bit_operators(
            (input('Выберите побитовый оператор: ~, &, ^, |, <<, >> : '))
        ))
